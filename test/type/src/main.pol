
type Check(a) {
   Ctor1(val: a)
   Ctor2
}

type Other {
    Other(val: nocrypt String)
}


pub fn check_inference(arg) {
    let b = Ok(12)
    let c = Err(arg) == b
    b
}

pub fn label_test(str: t, int: Int, tuple: #(String, Int)) {
    #(str, int)
}

pub fn main() {
    let b: nocrypt String = "test"
    let a: nocrypt String = b
    a |> check_inference
    check_inference(arg: a)
    check_inference(12)

    let q = label_test(int: 12, str: "test", tuple: #("test", 12))

    let b = 12
    let d = Ctor1(val: b)

    let map: Map(String, Int) = #{"key": 12, "key2": 12}

    Ctor1(map)

}
